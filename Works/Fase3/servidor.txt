Iniciando servidor:
0. criar uma pasta com um server.js
1. npm init -y
2. npm install express
>npm - gerenciador de pacotes
>iniciar o servidor: npm start
3.instalar o express:
npm install express


3. dps de instalar acima e configurar incialmente o servidor assim:
Importando o express
const express = require('express'); 
iniciando o express no servidor
const server = express();  

Servidor está ouvindo as requisições e respondendo 
server.get("/", function(req, res){ 
    return res.send("Hi");
});

server.listen(5000, function() {
    console.log("Server is runnning");
});

Instale outra dependência:
npm install -D nodemon

ela ajuda a reiniciar o servidor de forma mais prática
No caso, os arquivos javascript atualizam os arquivos javascript automaticamente

4.
Após isso configurar o script do arquivo package.json assim:
 "scripts": {
    "start": "nodemon server.js"
  }

5. Instalar o Nunjucks:
npm install nunjucks
>Reuso de código, lógicas de blocos de código dinâmicos

6. Após isso configurar o servidor para arquivos de estilos estáticos e configurar o template engine Nunjucks
 e por fim retornar ao usuário a página web
const nunjucks = require('nunjucks');

server.use(express.static("public"));

server.set("view engine", "html");
nunjucks.configure("views", {
    express: server
});

server.get("/", function(req, res){ 
    return res.render("index");
});

7. Instalar Browser-sync  e run-all - permitirá o navegador atualizar automaticamente após alguma mudança no código do projeto e o run-all vai fazer com que seja possível rodar vários serviços ao mesmo tempo
npm install browser-sync npm-run-all -D

8. Após isso é necessário realizar essas configurações:
  "scripts": {
    "start": "npm-run-all -p nodemon browsersync",
    "nodemon": "nodemon server.js",
    "browsersync": "browser-sync start --proxy http://localhost:5010 --files 'public,views'"
  },
Isso é a configuração de executar paralelamente os 2 servições nodemon e browsersync no npm start
Após, a configuração do nodemon,
Após, a configuração do browsersunc, em que é inicializado antes do servicor, e sincroniza com tudo que for alterado das pastar public  e files

9. Para o uso do req.body, é necessário configurar o servidor com esse middleware:
server.use(express.urlencoded({ extended: true }));

10. Instalando dependência que permite utilizar os métodos put e delete no formulário html!
Usar a dependência method-override:
npm install method-override

importar:
const methodOverride = require('method-override')


configurar no server.js:
configurando para que o post seja sobescrito por put antes do servidor ir para as rotas
server.use(methodOverride('_method'))
server.use(routes)

